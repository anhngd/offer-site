var ASW = (function() {
	var HOVER_TIMEOUT = 300,
	BEFOREGET_TIMEOUT = 500,
	LEAVE_TIMEOUT = 200,
	idApp=0;
	var cache = {};

	// Init
	zm.ready(function() {
		document.body.appendChild(zm.createElement('DIV', {
			'class': getWrapperClass(),
			id: 'aspopup'
		}, {
			top: '-9999px',
			left: '0px'
		}));
		document.body.appendChild(zm.createElement('DIV', {
			'class': getWrapperClass(),
			id: 'aspopuptemp'
		}, {
			top: '-9999px',
			left: '0px'
		}));
		zm("#aspopup").hover(function() {
			if (ASW.leaveTimeout)
				clearTimeout(ASW.leaveTimeout);
		}, function() {
			if (ASW.hoveredElement) {
				ASW.leaveTimeout = setTimeout(function() {
					hideMini();
					ASW.hoveredElement = null;
				}, LEAVE_TIMEOUT);
			}
		}).mouseup(function(e) {
			e.stopPropagation();
		}).html('<span id="asarrowtop" class="icodisbox" style="display: none"></span><div id="asmpctn" class="disbox"></div><span id="asarrowbot" class="icodisbox" style="display: none"></span>');
		zm("#aspopuptemp").html('<span class="icodisbox topright"></span><div id="asmpctntemp" class="disbox"></div><span id="asarrowbottemp" class="icodisbox botleft"></span>');
		zm(window).scroll(function() {
			ASW.hm();
		});
	});

	function getWrapperClass() {	
		return 'ctndisbox apptipbox';
	}	

	function renderMini(data, elem) {
		return data;
	}

	function setPopupPosition(elem,  ctn, before, after) {
		var ze = zm(elem), isHide = false;
		if (ze.css('display') == 'none')
			isHide = true;
		else
			ze.parents().each(function() {
				if (zm(this).css('display') == 'none') {
					isHide = true;
					return false;
				}
			});
		if (isHide) {
			hideMini();
			return;
		}
		var pop = ctn || zm('#aspopup'),
		offs = ze.offset(true),
		vp = zm.getViewport(),
		h = ze.outerHeight(),
		popH = pop.outerHeight(),
		cy = offs.top + h/2,
		top, left, ha, va;
		offs.left += zm.intval(ze.css('padding-left')) + zm.intval(ze.css('margin-left'));
		{
			if (vp.offsetY + vp.height/2 <= cy) {
				top = offs.top - popH - 7;
				ha = 'bot';
			} else {
				top = offs.top + h + 7;
				ha = 'top';
			}
		}
		var arrow = zm('#asarrow' + ha);
		arrow.show();
		zm('#asarrow' + (ha == 'top' ? 'bot' : 'top')).hide();
		var powidth = pop.outerWidth(),
		right = offs.left + powidth + 30;
		 if (vp.offsetX + vp.width > right) {
			left = offs.left - zm.intval(zm('#asmpctn').css('margin-left'));
			va = 'left';
		} else {
			left = offs.left + ze.width() - powidth + zm.intval(zm('#asmpctn').css('margin-left'));
			va = 'right';
		}
		typeof before == 'function' && before();		
			arrow.attr('class', 'icodisbox ' + ha + va);
		zm('#aspopup').css({
			top: top + 'px',
			left: left + 'px'
			});
		typeof after == 'function' && after();
	}


	function showMini(elem, data) {
		zm('#asmpctntemp').html(renderMini(data,  elem));
		zm('#aspopup').attr('class', getWrapperClass());
		zm('#aspopuptemp').attr('class', getWrapperClass());
		setPopupPosition(elem,  zm('#aspopuptemp'), function() {
			zm('#asmpctn').empty().removeClass('nodata').append(zm('#asmpctntemp').children());
		});
	}

	function hideMini() {
		zm('#aspopup').css({
			top: '-9999px',
			left: '0px'
		});
	}

	function showError(elem, err) {
		switch (err) {
			case 1:
				zm('#asmpctn').html('<p align="center">Tài khoản này không tồn tại.</p>').addClass('nodata');
				break;
			default:
				zm('#asmpctn').html('<p align="center">Có lỗi xảy ra! Xin vui lòng thử lại.</p>').addClass('nodata');
				break;
		}
		setPopupPosition(elem);
	}

	function startLoading(elem) {
		zm('#asmpctn').html('<p class="disbox_loading"></p>').addClass('nodata');
		setPopupPosition(elem);
	}

	return {
		
		showMiniProfile: function(id, elem) {
			id = zm.trim(id);
			if (!id || !elem)
				return;
			idApp=id;
			ASW.hoveredElement = elem;
			var data = cache[id];
			if (data){
			    showMini(elem, data);
			    setTimeout(function(){
				var appName=zm("#wg_"+idApp).attr("rel"); //console.info(idApp);
				zm("#h_appname").val(appName);
			    },500);
			}
			else {
				setTimeout(function() {
					if (!ASW.hoverTimeout)
						return;
					startLoading(elem);
					zm.getJSON('/ajx/pw?id='+ id + '&isLogin='+zmZingStore.isLogin, function(resp) {
						var err = resp == undefined ? 3 : resp.err,
						show = elem == ASW.hoveredElement;
						if (err != 0)
							show && showError(elem, err);
						else {
							cache[id] = resp.data;
							show && showMini(elem, resp.data);
							setTimeout(function(){
							    var appName=zm("#wg_"+idApp).attr("rel"); //console.info(idApp);
							    zm("#h_appname").val(appName);
							},500);
						}
					});
				}, BEFOREGET_TIMEOUT);
			}
		},

		hideMiniProfile: function() {
			if (ASW.hoverTimeout) {
				clearTimeout(ASW.hoverTimeout);
				delete ASW.hoverTimeout;
			}
			if (ASW.leaveTimeout)
				clearTimeout(ASW.leaveTimeout);
			hideMini();
		},

		sm: function(t, username, from, extra) {
			if (ASW.leaveTimeout)
				clearTimeout(ASW.leaveTimeout);
			if (ASW.hoverTimeout)
				clearTimeout(ASW.hoverTimeout);
			ASW.hoverTimeout = setTimeout(function() {
				var p = /\/u\/([a-z0-9\.\-_]+)\/?.*/i.exec(zm(t).attr('href'));
				ASW.showMiniProfile((p && p[1]) || username, t, from, extra);
			}, HOVER_TIMEOUT);
		},

		hm: function() {
			if (ASW.hoverTimeout) {
				clearTimeout(ASW.hoverTimeout);
				delete ASW.hoverTimeout;
			}
			ASW.leaveTimeout = setTimeout(function() {
				hideMini();
			}, LEAVE_TIMEOUT);
		}
	};
})();


